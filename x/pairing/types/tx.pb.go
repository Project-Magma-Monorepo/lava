// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lavanet/lava/pairing/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	types2 "github.com/cosmos/cosmos-sdk/x/staking/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types1 "github.com/lavanet/lava/v4/x/epochstorage/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgStakeProvider struct {
	Creator            string             `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainID            string             `protobuf:"bytes,2,opt,name=chainID,proto3" json:"chainID,omitempty"`
	Amount             types.Coin         `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
	Endpoints          []types1.Endpoint  `protobuf:"bytes,4,rep,name=endpoints,proto3" json:"endpoints"`
	Geolocation        int32              `protobuf:"varint,5,opt,name=geolocation,proto3" json:"geolocation,omitempty"`
	DelegateLimit      types.Coin         `protobuf:"bytes,7,opt,name=delegate_limit,json=delegateLimit,proto3" json:"delegate_limit"`
	DelegateCommission uint64             `protobuf:"varint,8,opt,name=delegate_commission,json=delegateCommission,proto3" json:"delegate_commission,omitempty"`
	Validator          string             `protobuf:"bytes,9,opt,name=validator,proto3" json:"validator,omitempty"`
	Address            string             `protobuf:"bytes,10,opt,name=address,proto3" json:"address,omitempty"`
	Description        types2.Description `protobuf:"bytes,11,opt,name=description,proto3" json:"description"`
}

func (m *MsgStakeProvider) Reset()         { *m = MsgStakeProvider{} }
func (m *MsgStakeProvider) String() string { return proto.CompactTextString(m) }
func (*MsgStakeProvider) ProtoMessage()    {}
func (*MsgStakeProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_07b85a84d2198a91, []int{0}
}
func (m *MsgStakeProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStakeProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStakeProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStakeProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStakeProvider.Merge(m, src)
}
func (m *MsgStakeProvider) XXX_Size() int {
	return m.Size()
}
func (m *MsgStakeProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStakeProvider.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStakeProvider proto.InternalMessageInfo

func (m *MsgStakeProvider) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgStakeProvider) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *MsgStakeProvider) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *MsgStakeProvider) GetEndpoints() []types1.Endpoint {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

func (m *MsgStakeProvider) GetGeolocation() int32 {
	if m != nil {
		return m.Geolocation
	}
	return 0
}

func (m *MsgStakeProvider) GetDelegateLimit() types.Coin {
	if m != nil {
		return m.DelegateLimit
	}
	return types.Coin{}
}

func (m *MsgStakeProvider) GetDelegateCommission() uint64 {
	if m != nil {
		return m.DelegateCommission
	}
	return 0
}

func (m *MsgStakeProvider) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *MsgStakeProvider) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MsgStakeProvider) GetDescription() types2.Description {
	if m != nil {
		return m.Description
	}
	return types2.Description{}
}

type MsgStakeProviderResponse struct {
}

func (m *MsgStakeProviderResponse) Reset()         { *m = MsgStakeProviderResponse{} }
func (m *MsgStakeProviderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgStakeProviderResponse) ProtoMessage()    {}
func (*MsgStakeProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07b85a84d2198a91, []int{1}
}
func (m *MsgStakeProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStakeProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStakeProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStakeProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStakeProviderResponse.Merge(m, src)
}
func (m *MsgStakeProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgStakeProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStakeProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStakeProviderResponse proto.InternalMessageInfo

type MsgUnstakeProvider struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainID   string `protobuf:"bytes,2,opt,name=chainID,proto3" json:"chainID,omitempty"`
	Validator string `protobuf:"bytes,3,opt,name=validator,proto3" json:"validator,omitempty"`
}

func (m *MsgUnstakeProvider) Reset()         { *m = MsgUnstakeProvider{} }
func (m *MsgUnstakeProvider) String() string { return proto.CompactTextString(m) }
func (*MsgUnstakeProvider) ProtoMessage()    {}
func (*MsgUnstakeProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_07b85a84d2198a91, []int{2}
}
func (m *MsgUnstakeProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnstakeProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnstakeProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnstakeProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnstakeProvider.Merge(m, src)
}
func (m *MsgUnstakeProvider) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnstakeProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnstakeProvider.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnstakeProvider proto.InternalMessageInfo

func (m *MsgUnstakeProvider) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUnstakeProvider) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *MsgUnstakeProvider) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

type MsgUnstakeProviderResponse struct {
}

func (m *MsgUnstakeProviderResponse) Reset()         { *m = MsgUnstakeProviderResponse{} }
func (m *MsgUnstakeProviderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnstakeProviderResponse) ProtoMessage()    {}
func (*MsgUnstakeProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07b85a84d2198a91, []int{3}
}
func (m *MsgUnstakeProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnstakeProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnstakeProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnstakeProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnstakeProviderResponse.Merge(m, src)
}
func (m *MsgUnstakeProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnstakeProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnstakeProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnstakeProviderResponse proto.InternalMessageInfo

type MsgRelayPayment struct {
	Creator            string               `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Relays             []*RelaySession      `protobuf:"bytes,2,rep,name=relays,proto3" json:"relays,omitempty"`
	DescriptionString  string               `protobuf:"bytes,4,opt,name=descriptionString,proto3" json:"descriptionString,omitempty"`
	LatestBlockReports []*LatestBlockReport `protobuf:"bytes,5,rep,name=latest_block_reports,json=latestBlockReports,proto3" json:"latest_block_reports,omitempty"`
}

func (m *MsgRelayPayment) Reset()         { *m = MsgRelayPayment{} }
func (m *MsgRelayPayment) String() string { return proto.CompactTextString(m) }
func (*MsgRelayPayment) ProtoMessage()    {}
func (*MsgRelayPayment) Descriptor() ([]byte, []int) {
	return fileDescriptor_07b85a84d2198a91, []int{4}
}
func (m *MsgRelayPayment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRelayPayment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRelayPayment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRelayPayment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRelayPayment.Merge(m, src)
}
func (m *MsgRelayPayment) XXX_Size() int {
	return m.Size()
}
func (m *MsgRelayPayment) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRelayPayment.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRelayPayment proto.InternalMessageInfo

func (m *MsgRelayPayment) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRelayPayment) GetRelays() []*RelaySession {
	if m != nil {
		return m.Relays
	}
	return nil
}

func (m *MsgRelayPayment) GetDescriptionString() string {
	if m != nil {
		return m.DescriptionString
	}
	return ""
}

func (m *MsgRelayPayment) GetLatestBlockReports() []*LatestBlockReport {
	if m != nil {
		return m.LatestBlockReports
	}
	return nil
}

type LatestBlockReport struct {
	SpecId      string `protobuf:"bytes,1,opt,name=spec_id,json=specId,proto3" json:"spec_id,omitempty"`
	LatestBlock uint64 `protobuf:"varint,2,opt,name=latest_block,json=latestBlock,proto3" json:"latest_block,omitempty"`
}

func (m *LatestBlockReport) Reset()         { *m = LatestBlockReport{} }
func (m *LatestBlockReport) String() string { return proto.CompactTextString(m) }
func (*LatestBlockReport) ProtoMessage()    {}
func (*LatestBlockReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_07b85a84d2198a91, []int{5}
}
func (m *LatestBlockReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LatestBlockReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LatestBlockReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LatestBlockReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LatestBlockReport.Merge(m, src)
}
func (m *LatestBlockReport) XXX_Size() int {
	return m.Size()
}
func (m *LatestBlockReport) XXX_DiscardUnknown() {
	xxx_messageInfo_LatestBlockReport.DiscardUnknown(m)
}

var xxx_messageInfo_LatestBlockReport proto.InternalMessageInfo

func (m *LatestBlockReport) GetSpecId() string {
	if m != nil {
		return m.SpecId
	}
	return ""
}

func (m *LatestBlockReport) GetLatestBlock() uint64 {
	if m != nil {
		return m.LatestBlock
	}
	return 0
}

type MsgRelayPaymentResponse struct {
	RejectedRelays bool `protobuf:"varint,1,opt,name=rejected_relays,json=rejectedRelays,proto3" json:"rejected_relays,omitempty"`
}

func (m *MsgRelayPaymentResponse) Reset()         { *m = MsgRelayPaymentResponse{} }
func (m *MsgRelayPaymentResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRelayPaymentResponse) ProtoMessage()    {}
func (*MsgRelayPaymentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07b85a84d2198a91, []int{6}
}
func (m *MsgRelayPaymentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRelayPaymentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRelayPaymentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRelayPaymentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRelayPaymentResponse.Merge(m, src)
}
func (m *MsgRelayPaymentResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRelayPaymentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRelayPaymentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRelayPaymentResponse proto.InternalMessageInfo

func (m *MsgRelayPaymentResponse) GetRejectedRelays() bool {
	if m != nil {
		return m.RejectedRelays
	}
	return false
}

type MsgFreezeProvider struct {
	Creator  string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainIds []string `protobuf:"bytes,2,rep,name=chainIds,proto3" json:"chainIds,omitempty"`
	Reason   string   `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *MsgFreezeProvider) Reset()         { *m = MsgFreezeProvider{} }
func (m *MsgFreezeProvider) String() string { return proto.CompactTextString(m) }
func (*MsgFreezeProvider) ProtoMessage()    {}
func (*MsgFreezeProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_07b85a84d2198a91, []int{7}
}
func (m *MsgFreezeProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFreezeProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFreezeProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFreezeProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFreezeProvider.Merge(m, src)
}
func (m *MsgFreezeProvider) XXX_Size() int {
	return m.Size()
}
func (m *MsgFreezeProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFreezeProvider.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFreezeProvider proto.InternalMessageInfo

func (m *MsgFreezeProvider) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgFreezeProvider) GetChainIds() []string {
	if m != nil {
		return m.ChainIds
	}
	return nil
}

func (m *MsgFreezeProvider) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type MsgFreezeProviderResponse struct {
}

func (m *MsgFreezeProviderResponse) Reset()         { *m = MsgFreezeProviderResponse{} }
func (m *MsgFreezeProviderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFreezeProviderResponse) ProtoMessage()    {}
func (*MsgFreezeProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07b85a84d2198a91, []int{8}
}
func (m *MsgFreezeProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFreezeProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFreezeProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFreezeProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFreezeProviderResponse.Merge(m, src)
}
func (m *MsgFreezeProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFreezeProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFreezeProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFreezeProviderResponse proto.InternalMessageInfo

type MsgUnfreezeProvider struct {
	Creator  string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainIds []string `protobuf:"bytes,2,rep,name=chainIds,proto3" json:"chainIds,omitempty"`
}

func (m *MsgUnfreezeProvider) Reset()         { *m = MsgUnfreezeProvider{} }
func (m *MsgUnfreezeProvider) String() string { return proto.CompactTextString(m) }
func (*MsgUnfreezeProvider) ProtoMessage()    {}
func (*MsgUnfreezeProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_07b85a84d2198a91, []int{9}
}
func (m *MsgUnfreezeProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnfreezeProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnfreezeProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnfreezeProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnfreezeProvider.Merge(m, src)
}
func (m *MsgUnfreezeProvider) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnfreezeProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnfreezeProvider.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnfreezeProvider proto.InternalMessageInfo

func (m *MsgUnfreezeProvider) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUnfreezeProvider) GetChainIds() []string {
	if m != nil {
		return m.ChainIds
	}
	return nil
}

type MsgUnfreezeProviderResponse struct {
}

func (m *MsgUnfreezeProviderResponse) Reset()         { *m = MsgUnfreezeProviderResponse{} }
func (m *MsgUnfreezeProviderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnfreezeProviderResponse) ProtoMessage()    {}
func (*MsgUnfreezeProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07b85a84d2198a91, []int{10}
}
func (m *MsgUnfreezeProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnfreezeProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnfreezeProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnfreezeProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnfreezeProviderResponse.Merge(m, src)
}
func (m *MsgUnfreezeProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnfreezeProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnfreezeProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnfreezeProviderResponse proto.InternalMessageInfo

type MsgMoveProviderStake struct {
	Creator  string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SrcChain string     `protobuf:"bytes,2,opt,name=src_chain,json=srcChain,proto3" json:"src_chain,omitempty"`
	DstChain string     `protobuf:"bytes,3,opt,name=dst_chain,json=dstChain,proto3" json:"dst_chain,omitempty"`
	Amount   types.Coin `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgMoveProviderStake) Reset()         { *m = MsgMoveProviderStake{} }
func (m *MsgMoveProviderStake) String() string { return proto.CompactTextString(m) }
func (*MsgMoveProviderStake) ProtoMessage()    {}
func (*MsgMoveProviderStake) Descriptor() ([]byte, []int) {
	return fileDescriptor_07b85a84d2198a91, []int{11}
}
func (m *MsgMoveProviderStake) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMoveProviderStake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMoveProviderStake.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMoveProviderStake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMoveProviderStake.Merge(m, src)
}
func (m *MsgMoveProviderStake) XXX_Size() int {
	return m.Size()
}
func (m *MsgMoveProviderStake) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMoveProviderStake.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMoveProviderStake proto.InternalMessageInfo

func (m *MsgMoveProviderStake) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgMoveProviderStake) GetSrcChain() string {
	if m != nil {
		return m.SrcChain
	}
	return ""
}

func (m *MsgMoveProviderStake) GetDstChain() string {
	if m != nil {
		return m.DstChain
	}
	return ""
}

func (m *MsgMoveProviderStake) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

type MsgMoveProviderStakeResponse struct {
}

func (m *MsgMoveProviderStakeResponse) Reset()         { *m = MsgMoveProviderStakeResponse{} }
func (m *MsgMoveProviderStakeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMoveProviderStakeResponse) ProtoMessage()    {}
func (*MsgMoveProviderStakeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07b85a84d2198a91, []int{12}
}
func (m *MsgMoveProviderStakeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMoveProviderStakeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMoveProviderStakeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMoveProviderStakeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMoveProviderStakeResponse.Merge(m, src)
}
func (m *MsgMoveProviderStakeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMoveProviderStakeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMoveProviderStakeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMoveProviderStakeResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgStakeProvider)(nil), "lavanet.lava.pairing.MsgStakeProvider")
	proto.RegisterType((*MsgStakeProviderResponse)(nil), "lavanet.lava.pairing.MsgStakeProviderResponse")
	proto.RegisterType((*MsgUnstakeProvider)(nil), "lavanet.lava.pairing.MsgUnstakeProvider")
	proto.RegisterType((*MsgUnstakeProviderResponse)(nil), "lavanet.lava.pairing.MsgUnstakeProviderResponse")
	proto.RegisterType((*MsgRelayPayment)(nil), "lavanet.lava.pairing.MsgRelayPayment")
	proto.RegisterType((*LatestBlockReport)(nil), "lavanet.lava.pairing.LatestBlockReport")
	proto.RegisterType((*MsgRelayPaymentResponse)(nil), "lavanet.lava.pairing.MsgRelayPaymentResponse")
	proto.RegisterType((*MsgFreezeProvider)(nil), "lavanet.lava.pairing.MsgFreezeProvider")
	proto.RegisterType((*MsgFreezeProviderResponse)(nil), "lavanet.lava.pairing.MsgFreezeProviderResponse")
	proto.RegisterType((*MsgUnfreezeProvider)(nil), "lavanet.lava.pairing.MsgUnfreezeProvider")
	proto.RegisterType((*MsgUnfreezeProviderResponse)(nil), "lavanet.lava.pairing.MsgUnfreezeProviderResponse")
	proto.RegisterType((*MsgMoveProviderStake)(nil), "lavanet.lava.pairing.MsgMoveProviderStake")
	proto.RegisterType((*MsgMoveProviderStakeResponse)(nil), "lavanet.lava.pairing.MsgMoveProviderStakeResponse")
}

func init() { proto.RegisterFile("lavanet/lava/pairing/tx.proto", fileDescriptor_07b85a84d2198a91) }

var fileDescriptor_07b85a84d2198a91 = []byte{
	// 988 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x31, 0x6f, 0xdb, 0x46,
	0x14, 0x36, 0x6d, 0xda, 0x96, 0x9e, 0x12, 0x5b, 0x62, 0xd4, 0x9a, 0xa6, 0x1d, 0x45, 0x61, 0x9a,
	0x58, 0x15, 0x5a, 0xb2, 0x76, 0x0b, 0x14, 0xd0, 0x28, 0xbb, 0x29, 0x12, 0x44, 0xa8, 0x41, 0xa3,
	0x43, 0xbb, 0x08, 0x27, 0xf2, 0x4a, 0x33, 0x16, 0x79, 0x04, 0xef, 0x22, 0xc4, 0x1d, 0x33, 0x76,
	0xca, 0xd4, 0xa5, 0xe8, 0xde, 0xd1, 0x3f, 0x23, 0x5b, 0x33, 0x76, 0x2a, 0x0a, 0x7b, 0xf0, 0xdf,
	0x28, 0xee, 0x78, 0xa4, 0x24, 0x4a, 0x36, 0x54, 0x34, 0x8b, 0xc8, 0x77, 0xef, 0x7b, 0xef, 0x7d,
	0xf7, 0xdd, 0x7b, 0x27, 0xc2, 0xfd, 0x21, 0x1a, 0xa1, 0x08, 0x33, 0x9b, 0x3f, 0xed, 0x18, 0x05,
	0x49, 0x10, 0xf9, 0x36, 0x7b, 0x6d, 0xc5, 0x09, 0x61, 0x44, 0xab, 0x4b, 0xb7, 0xc5, 0x9f, 0x96,
	0x74, 0x1b, 0x0d, 0x97, 0xd0, 0x90, 0x50, 0x7b, 0x80, 0x28, 0xb6, 0x47, 0xfb, 0x03, 0xcc, 0xd0,
	0xbe, 0xed, 0x92, 0x20, 0x4a, 0xa3, 0x8c, 0xba, 0x4f, 0x7c, 0x22, 0x5e, 0x6d, 0xfe, 0x26, 0x57,
	0x5b, 0x53, 0xa5, 0x70, 0x4c, 0xdc, 0x53, 0xca, 0x48, 0x82, 0x7c, 0x6c, 0xe3, 0xc8, 0x8b, 0x49,
	0x10, 0x31, 0x89, 0x6c, 0xce, 0x25, 0x95, 0xe0, 0x21, 0x3a, 0x97, 0x88, 0x4f, 0x24, 0x03, 0xca,
	0xd0, 0x19, 0xf7, 0x65, 0x24, 0xa4, 0x2d, 0x51, 0x35, 0x14, 0x06, 0x11, 0xb1, 0xc5, 0xaf, 0x5c,
	0xda, 0x92, 0x81, 0x21, 0xe5, 0x41, 0xfc, 0x91, 0x3a, 0xcc, 0xdf, 0x54, 0xa8, 0xf6, 0xa8, 0x7f,
	0xc2, 0xd0, 0x19, 0x3e, 0x4e, 0xc8, 0x28, 0xf0, 0x70, 0xa2, 0xe9, 0xb0, 0xee, 0x26, 0x18, 0x31,
	0x92, 0xe8, 0x4a, 0x53, 0x69, 0x95, 0x9d, 0xcc, 0x14, 0x9e, 0x53, 0x14, 0x44, 0xcf, 0x8e, 0xf4,
	0x65, 0xe9, 0x49, 0x4d, 0xed, 0x6b, 0x58, 0x43, 0x21, 0x79, 0x15, 0x31, 0x7d, 0xa5, 0xa9, 0xb4,
	0x2a, 0x07, 0xdb, 0x56, 0x5a, 0xd2, 0xe2, 0x6a, 0x59, 0x92, 0xa8, 0x75, 0x48, 0x82, 0xa8, 0xab,
	0xbe, 0xfb, 0xfb, 0xc1, 0x92, 0x23, 0xe1, 0xda, 0xb7, 0x50, 0xce, 0x74, 0xa0, 0xba, 0xda, 0x5c,
	0x69, 0x55, 0x0e, 0x1e, 0x59, 0x53, 0xfa, 0x4f, 0x6a, 0x66, 0x7d, 0x23, 0xb1, 0x32, 0xcb, 0x38,
	0x56, 0x6b, 0x42, 0xc5, 0xc7, 0x64, 0x48, 0x5c, 0xc4, 0x02, 0x12, 0xe9, 0xab, 0x4d, 0xa5, 0xb5,
	0xea, 0x4c, 0x2e, 0x69, 0x4f, 0x61, 0xc3, 0xc3, 0x43, 0xec, 0x23, 0x86, 0xfb, 0xc3, 0x20, 0x0c,
	0x98, 0xbe, 0xbe, 0x18, 0xd7, 0xbb, 0x59, 0xd8, 0x0b, 0x1e, 0xa5, 0xd9, 0x70, 0x2f, 0xcf, 0xe3,
	0x92, 0x30, 0x0c, 0x28, 0xe5, 0x15, 0x4b, 0x4d, 0xa5, 0xa5, 0x3a, 0x5a, 0xe6, 0x3a, 0xcc, 0x3d,
	0xda, 0x2e, 0x94, 0x47, 0x68, 0x18, 0x78, 0x42, 0xd2, 0xb2, 0x10, 0x6e, 0xbc, 0xc0, 0x45, 0x45,
	0x9e, 0x97, 0x60, 0x4a, 0x75, 0x48, 0x45, 0x95, 0xa6, 0x76, 0x0c, 0x15, 0x0f, 0x53, 0x37, 0x09,
	0x62, 0xb1, 0xa5, 0x8a, 0x60, 0xfb, 0x28, 0x63, 0x9b, 0x9d, 0x7a, 0x46, 0xf8, 0x68, 0x0c, 0xed,
	0x96, 0x39, 0xef, 0x3f, 0xae, 0x2f, 0xda, 0x8a, 0x33, 0x99, 0xa2, 0xf3, 0xe4, 0xcd, 0xf5, 0x45,
	0x3b, 0x3b, 0xce, 0x5f, 0xae, 0x2f, 0xda, 0x1f, 0x65, 0x7d, 0x36, 0xd5, 0x02, 0xcf, 0xd5, 0xd2,
	0x5a, 0x75, 0xdd, 0x34, 0x40, 0x2f, 0x36, 0x87, 0x83, 0x69, 0x4c, 0x22, 0x8a, 0xcd, 0xb7, 0x0a,
	0x68, 0x3d, 0xea, 0x7f, 0x1f, 0xd1, 0xff, 0xdd, 0x3b, 0x53, 0xf2, 0xac, 0x14, 0xe4, 0xe9, 0xb4,
	0x8a, 0x94, 0xb7, 0x32, 0xca, 0x85, 0xda, 0xe6, 0x2e, 0x18, 0xb3, 0x8c, 0x72, 0xc2, 0xbf, 0x2f,
	0xc3, 0x66, 0x8f, 0xfa, 0x0e, 0x9f, 0xa7, 0x63, 0x74, 0x1e, 0xe2, 0x88, 0xdd, 0xc2, 0xb6, 0x03,
	0x6b, 0x62, 0xf2, 0xa8, 0xbe, 0x2c, 0x7a, 0xd2, 0xb4, 0xe6, 0xdd, 0x09, 0x96, 0xc8, 0x76, 0x82,
	0xc5, 0x31, 0x3b, 0x32, 0x42, 0xfb, 0x0c, 0x6a, 0x13, 0x9a, 0x9f, 0x30, 0x8e, 0xd4, 0x55, 0x91,
	0x7f, 0xd6, 0xa1, 0xfd, 0x00, 0xf5, 0x21, 0x62, 0x98, 0xb2, 0xfe, 0x60, 0x48, 0xdc, 0xb3, 0x7e,
	0x82, 0x63, 0x92, 0x30, 0xaa, 0xaf, 0x8a, 0xba, 0x7b, 0xf3, 0xeb, 0xbe, 0x10, 0x11, 0x5d, 0x1e,
	0xe0, 0x08, 0xbc, 0xa3, 0x0d, 0x8b, 0x4b, 0xb4, 0xf3, 0xb8, 0x28, 0x5d, 0x3d, 0x93, 0x6e, 0x52,
	0x85, 0xe7, 0x6a, 0x69, 0xa5, 0xaa, 0x9a, 0xdf, 0x41, 0x6d, 0x26, 0xab, 0xb6, 0x05, 0xeb, 0x34,
	0xc6, 0x6e, 0x3f, 0xf0, 0xa4, 0x40, 0x6b, 0xdc, 0x7c, 0xe6, 0x69, 0x0f, 0xe1, 0xce, 0x24, 0x6b,
	0x71, 0xa4, 0xaa, 0x53, 0x99, 0x20, 0x61, 0x76, 0x61, 0xab, 0xa0, 0x77, 0x76, 0x16, 0xda, 0x1e,
	0x6c, 0x26, 0xf8, 0x25, 0x76, 0x19, 0xf6, 0xfa, 0x52, 0x66, 0x9e, 0xbe, 0xe4, 0x6c, 0x64, 0xcb,
	0x22, 0x8c, 0x9a, 0x6f, 0x14, 0xa8, 0xf5, 0xa8, 0xff, 0x34, 0xc1, 0xf8, 0xe7, 0x45, 0x9a, 0xcc,
	0x80, 0x52, 0xda, 0x55, 0x5e, 0x7a, 0x70, 0x65, 0x27, 0xb7, 0xb5, 0x8f, 0xf9, 0x91, 0x22, 0x4a,
	0x22, 0xd9, 0x63, 0xd2, 0xea, 0x3c, 0x28, 0xaa, 0xb4, 0x91, 0xa9, 0x94, 0x96, 0x35, 0x77, 0x60,
	0x7b, 0x86, 0x43, 0xde, 0x56, 0x11, 0xdc, 0x13, 0x4d, 0xf7, 0xd3, 0x07, 0xa0, 0xd8, 0x79, 0x58,
	0xa4, 0x52, 0x1d, 0xf7, 0x7a, 0x5a, 0xc0, 0xbc, 0x0f, 0x3b, 0x73, 0xea, 0xe5, 0x74, 0xfe, 0x54,
	0xa0, 0xde, 0xa3, 0x7e, 0x8f, 0x8c, 0x72, 0x9f, 0x98, 0xdf, 0x5b, 0x08, 0xed, 0x40, 0x99, 0x26,
	0x6e, 0x5f, 0x90, 0x90, 0xa3, 0x59, 0xa2, 0x89, 0x7b, 0xc8, 0x6d, 0xee, 0xf4, 0x28, 0x93, 0xce,
	0x54, 0xb7, 0x92, 0x47, 0x59, 0xea, 0x1c, 0x5f, 0xfa, 0xea, 0x7f, 0xba, 0xf4, 0x3b, 0xed, 0xe2,
	0x3e, 0xb7, 0xb3, 0x7d, 0xce, 0x10, 0x37, 0x1b, 0xb0, 0x3b, 0x6f, 0x43, 0xd9, 0x8e, 0x0f, 0x7e,
	0x5d, 0x85, 0x95, 0x1e, 0xf5, 0x35, 0x1f, 0xee, 0x4e, 0xff, 0x8d, 0x3d, 0x99, 0x3f, 0x3a, 0xc5,
	0x1b, 0xcd, 0xb0, 0x16, 0xc3, 0xe5, 0xcd, 0x1b, 0xc2, 0x66, 0xf1, 0xd6, 0x6b, 0xdd, 0x98, 0xa2,
	0x80, 0x34, 0xbe, 0x58, 0x14, 0x99, 0x97, 0xf3, 0xe0, 0xce, 0xd4, 0x9d, 0xf5, 0xf8, 0xc6, 0x0c,
	0x93, 0x30, 0xe3, 0xf3, 0x85, 0x60, 0x79, 0x95, 0x97, 0xb0, 0x51, 0x18, 0xb2, 0xbd, 0x1b, 0x13,
	0x4c, 0x03, 0x0d, 0x7b, 0x41, 0x60, 0x5e, 0x2b, 0x86, 0xea, 0xcc, 0xbc, 0x7c, 0x7a, 0x8b, 0x2e,
	0xd3, 0x50, 0x63, 0x7f, 0x61, 0x68, 0x5e, 0x91, 0x42, 0x6d, 0x76, 0x22, 0xda, 0x37, 0xe6, 0x99,
	0xc1, 0x1a, 0x07, 0x8b, 0x63, 0xb3, 0xa2, 0xdd, 0xa3, 0x77, 0x97, 0x0d, 0xe5, 0xfd, 0x65, 0x43,
	0xf9, 0xe7, 0xb2, 0xa1, 0xbc, 0xbd, 0x6a, 0x2c, 0xbd, 0xbf, 0x6a, 0x2c, 0xfd, 0x75, 0xd5, 0x58,
	0xfa, 0xb1, 0xed, 0x07, 0xec, 0xf4, 0xd5, 0xc0, 0x72, 0x49, 0x68, 0x4f, 0x7d, 0xf4, 0x8d, 0xbe,
	0xb2, 0x5f, 0x8f, 0x3f, 0x47, 0xcf, 0x63, 0x4c, 0x07, 0x6b, 0xe2, 0x43, 0xed, 0xcb, 0x7f, 0x03,
	0x00, 0x00, 0xff, 0xff, 0xbe, 0x45, 0x74, 0x94, 0xb3, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	StakeProvider(ctx context.Context, in *MsgStakeProvider, opts ...grpc.CallOption) (*MsgStakeProviderResponse, error)
	UnstakeProvider(ctx context.Context, in *MsgUnstakeProvider, opts ...grpc.CallOption) (*MsgUnstakeProviderResponse, error)
	RelayPayment(ctx context.Context, in *MsgRelayPayment, opts ...grpc.CallOption) (*MsgRelayPaymentResponse, error)
	FreezeProvider(ctx context.Context, in *MsgFreezeProvider, opts ...grpc.CallOption) (*MsgFreezeProviderResponse, error)
	UnfreezeProvider(ctx context.Context, in *MsgUnfreezeProvider, opts ...grpc.CallOption) (*MsgUnfreezeProviderResponse, error)
	MoveProviderStake(ctx context.Context, in *MsgMoveProviderStake, opts ...grpc.CallOption) (*MsgMoveProviderStakeResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) StakeProvider(ctx context.Context, in *MsgStakeProvider, opts ...grpc.CallOption) (*MsgStakeProviderResponse, error) {
	out := new(MsgStakeProviderResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.pairing.Msg/StakeProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnstakeProvider(ctx context.Context, in *MsgUnstakeProvider, opts ...grpc.CallOption) (*MsgUnstakeProviderResponse, error) {
	out := new(MsgUnstakeProviderResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.pairing.Msg/UnstakeProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RelayPayment(ctx context.Context, in *MsgRelayPayment, opts ...grpc.CallOption) (*MsgRelayPaymentResponse, error) {
	out := new(MsgRelayPaymentResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.pairing.Msg/RelayPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) FreezeProvider(ctx context.Context, in *MsgFreezeProvider, opts ...grpc.CallOption) (*MsgFreezeProviderResponse, error) {
	out := new(MsgFreezeProviderResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.pairing.Msg/FreezeProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnfreezeProvider(ctx context.Context, in *MsgUnfreezeProvider, opts ...grpc.CallOption) (*MsgUnfreezeProviderResponse, error) {
	out := new(MsgUnfreezeProviderResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.pairing.Msg/UnfreezeProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MoveProviderStake(ctx context.Context, in *MsgMoveProviderStake, opts ...grpc.CallOption) (*MsgMoveProviderStakeResponse, error) {
	out := new(MsgMoveProviderStakeResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.pairing.Msg/MoveProviderStake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	StakeProvider(context.Context, *MsgStakeProvider) (*MsgStakeProviderResponse, error)
	UnstakeProvider(context.Context, *MsgUnstakeProvider) (*MsgUnstakeProviderResponse, error)
	RelayPayment(context.Context, *MsgRelayPayment) (*MsgRelayPaymentResponse, error)
	FreezeProvider(context.Context, *MsgFreezeProvider) (*MsgFreezeProviderResponse, error)
	UnfreezeProvider(context.Context, *MsgUnfreezeProvider) (*MsgUnfreezeProviderResponse, error)
	MoveProviderStake(context.Context, *MsgMoveProviderStake) (*MsgMoveProviderStakeResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) StakeProvider(ctx context.Context, req *MsgStakeProvider) (*MsgStakeProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakeProvider not implemented")
}
func (*UnimplementedMsgServer) UnstakeProvider(ctx context.Context, req *MsgUnstakeProvider) (*MsgUnstakeProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnstakeProvider not implemented")
}
func (*UnimplementedMsgServer) RelayPayment(ctx context.Context, req *MsgRelayPayment) (*MsgRelayPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayPayment not implemented")
}
func (*UnimplementedMsgServer) FreezeProvider(ctx context.Context, req *MsgFreezeProvider) (*MsgFreezeProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreezeProvider not implemented")
}
func (*UnimplementedMsgServer) UnfreezeProvider(ctx context.Context, req *MsgUnfreezeProvider) (*MsgUnfreezeProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfreezeProvider not implemented")
}
func (*UnimplementedMsgServer) MoveProviderStake(ctx context.Context, req *MsgMoveProviderStake) (*MsgMoveProviderStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveProviderStake not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_StakeProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStakeProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StakeProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.pairing.Msg/StakeProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StakeProvider(ctx, req.(*MsgStakeProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnstakeProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnstakeProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnstakeProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.pairing.Msg/UnstakeProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnstakeProvider(ctx, req.(*MsgUnstakeProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RelayPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRelayPayment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RelayPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.pairing.Msg/RelayPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RelayPayment(ctx, req.(*MsgRelayPayment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_FreezeProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFreezeProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FreezeProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.pairing.Msg/FreezeProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FreezeProvider(ctx, req.(*MsgFreezeProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnfreezeProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnfreezeProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnfreezeProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.pairing.Msg/UnfreezeProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnfreezeProvider(ctx, req.(*MsgUnfreezeProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MoveProviderStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMoveProviderStake)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MoveProviderStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.pairing.Msg/MoveProviderStake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MoveProviderStake(ctx, req.(*MsgMoveProviderStake))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lavanet.lava.pairing.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StakeProvider",
			Handler:    _Msg_StakeProvider_Handler,
		},
		{
			MethodName: "UnstakeProvider",
			Handler:    _Msg_UnstakeProvider_Handler,
		},
		{
			MethodName: "RelayPayment",
			Handler:    _Msg_RelayPayment_Handler,
		},
		{
			MethodName: "FreezeProvider",
			Handler:    _Msg_FreezeProvider_Handler,
		},
		{
			MethodName: "UnfreezeProvider",
			Handler:    _Msg_UnfreezeProvider_Handler,
		},
		{
			MethodName: "MoveProviderStake",
			Handler:    _Msg_MoveProviderStake_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lavanet/lava/pairing/tx.proto",
}

func (m *MsgStakeProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStakeProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStakeProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x4a
	}
	if m.DelegateCommission != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DelegateCommission))
		i--
		dAtA[i] = 0x40
	}
	{
		size, err := m.DelegateLimit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.Geolocation != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Geolocation))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Endpoints) > 0 {
		for iNdEx := len(m.Endpoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Endpoints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgStakeProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStakeProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStakeProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnstakeProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnstakeProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnstakeProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnstakeProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnstakeProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnstakeProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRelayPayment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRelayPayment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRelayPayment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LatestBlockReports) > 0 {
		for iNdEx := len(m.LatestBlockReports) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LatestBlockReports[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.DescriptionString) > 0 {
		i -= len(m.DescriptionString)
		copy(dAtA[i:], m.DescriptionString)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DescriptionString)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Relays) > 0 {
		for iNdEx := len(m.Relays) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Relays[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LatestBlockReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LatestBlockReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LatestBlockReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LatestBlock != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.LatestBlock))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SpecId) > 0 {
		i -= len(m.SpecId)
		copy(dAtA[i:], m.SpecId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SpecId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRelayPaymentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRelayPaymentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRelayPaymentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RejectedRelays {
		i--
		if m.RejectedRelays {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgFreezeProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFreezeProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFreezeProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainIds) > 0 {
		for iNdEx := len(m.ChainIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ChainIds[iNdEx])
			copy(dAtA[i:], m.ChainIds[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ChainIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFreezeProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFreezeProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFreezeProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnfreezeProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnfreezeProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnfreezeProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainIds) > 0 {
		for iNdEx := len(m.ChainIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ChainIds[iNdEx])
			copy(dAtA[i:], m.ChainIds[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ChainIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnfreezeProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnfreezeProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnfreezeProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMoveProviderStake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMoveProviderStake) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMoveProviderStake) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.DstChain) > 0 {
		i -= len(m.DstChain)
		copy(dAtA[i:], m.DstChain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DstChain)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SrcChain) > 0 {
		i -= len(m.SrcChain)
		copy(dAtA[i:], m.SrcChain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SrcChain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMoveProviderStakeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMoveProviderStakeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMoveProviderStakeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgStakeProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.Endpoints) > 0 {
		for _, e := range m.Endpoints {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.Geolocation != 0 {
		n += 1 + sovTx(uint64(m.Geolocation))
	}
	l = m.DelegateLimit.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.DelegateCommission != 0 {
		n += 1 + sovTx(uint64(m.DelegateCommission))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Description.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgStakeProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnstakeProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUnstakeProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRelayPayment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Relays) > 0 {
		for _, e := range m.Relays {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.DescriptionString)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.LatestBlockReports) > 0 {
		for _, e := range m.LatestBlockReports {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *LatestBlockReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpecId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.LatestBlock != 0 {
		n += 1 + sovTx(uint64(m.LatestBlock))
	}
	return n
}

func (m *MsgRelayPaymentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RejectedRelays {
		n += 2
	}
	return n
}

func (m *MsgFreezeProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.ChainIds) > 0 {
		for _, s := range m.ChainIds {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgFreezeProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnfreezeProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.ChainIds) > 0 {
		for _, s := range m.ChainIds {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUnfreezeProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMoveProviderStake) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SrcChain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DstChain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgMoveProviderStakeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgStakeProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStakeProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStakeProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoints = append(m.Endpoints, types1.Endpoint{})
			if err := m.Endpoints[len(m.Endpoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Geolocation", wireType)
			}
			m.Geolocation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Geolocation |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegateLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegateCommission", wireType)
			}
			m.DelegateCommission = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelegateCommission |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStakeProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStakeProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStakeProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnstakeProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnstakeProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnstakeProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnstakeProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnstakeProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnstakeProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRelayPayment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRelayPayment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRelayPayment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relays", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relays = append(m.Relays, &RelaySession{})
			if err := m.Relays[len(m.Relays)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptionString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DescriptionString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestBlockReports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestBlockReports = append(m.LatestBlockReports, &LatestBlockReport{})
			if err := m.LatestBlockReports[len(m.LatestBlockReports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LatestBlockReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LatestBlockReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LatestBlockReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestBlock", wireType)
			}
			m.LatestBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRelayPaymentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRelayPaymentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRelayPaymentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectedRelays", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RejectedRelays = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFreezeProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFreezeProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFreezeProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainIds = append(m.ChainIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFreezeProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFreezeProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFreezeProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnfreezeProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnfreezeProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnfreezeProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainIds = append(m.ChainIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnfreezeProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnfreezeProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnfreezeProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMoveProviderStake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMoveProviderStake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMoveProviderStake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMoveProviderStakeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMoveProviderStakeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMoveProviderStakeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
