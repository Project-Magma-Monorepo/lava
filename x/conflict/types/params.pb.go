// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lavanet/lava/conflict/params.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	MajorityPercent cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=majorityPercent,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"majorityPercent" yaml:"majority_percent"`
	VoteStartSpan   uint64                      `protobuf:"varint,2,opt,name=voteStartSpan,proto3" json:"voteStartSpan,omitempty"`
	VotePeriod      uint64                      `protobuf:"varint,3,opt,name=votePeriod,proto3" json:"votePeriod,omitempty"`
	Rewards         Rewards                     `protobuf:"bytes,4,opt,name=Rewards,proto3" json:"Rewards"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_a921a7b735ec6ed8, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetVoteStartSpan() uint64 {
	if m != nil {
		return m.VoteStartSpan
	}
	return 0
}

func (m *Params) GetVotePeriod() uint64 {
	if m != nil {
		return m.VotePeriod
	}
	return 0
}

func (m *Params) GetRewards() Rewards {
	if m != nil {
		return m.Rewards
	}
	return Rewards{}
}

type Rewards struct {
	WinnerRewardPercent cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=winnerRewardPercent,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"winnerRewardPercent" yaml:"winner_reward_percent"`
	ClientRewardPercent cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=clientRewardPercent,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"clientRewardPercent" yaml:"client_reward_percent"`
	VotersRewardPercent cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=votersRewardPercent,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"votersRewardPercent" yaml:"voters_reward_percent"`
}

func (m *Rewards) Reset()         { *m = Rewards{} }
func (m *Rewards) String() string { return proto.CompactTextString(m) }
func (*Rewards) ProtoMessage()    {}
func (*Rewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_a921a7b735ec6ed8, []int{1}
}
func (m *Rewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rewards.Merge(m, src)
}
func (m *Rewards) XXX_Size() int {
	return m.Size()
}
func (m *Rewards) XXX_DiscardUnknown() {
	xxx_messageInfo_Rewards.DiscardUnknown(m)
}

var xxx_messageInfo_Rewards proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "lavanet.lava.conflict.Params")
	proto.RegisterType((*Rewards)(nil), "lavanet.lava.conflict.Rewards")
}

func init() {
	proto.RegisterFile("lavanet/lava/conflict/params.proto", fileDescriptor_a921a7b735ec6ed8)
}

var fileDescriptor_a921a7b735ec6ed8 = []byte{
	// 389 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x31, 0x6b, 0xe3, 0x30,
	0x18, 0x86, 0xad, 0xc4, 0xe4, 0x38, 0x1d, 0xc7, 0x81, 0xef, 0x8e, 0x33, 0x77, 0x87, 0x1c, 0x4c,
	0x87, 0x40, 0x41, 0x86, 0xb6, 0x53, 0x86, 0x0c, 0x69, 0xbb, 0x75, 0x08, 0xce, 0xd6, 0x25, 0x28,
	0x8a, 0xea, 0xb8, 0xb5, 0x2d, 0x23, 0x2b, 0x49, 0xfd, 0x2f, 0x3a, 0x76, 0xec, 0xcf, 0xc9, 0x98,
	0xb1, 0x74, 0x08, 0x25, 0xd9, 0x3b, 0xf4, 0x07, 0x94, 0x22, 0x3b, 0x69, 0xea, 0xc6, 0x43, 0xc9,
	0x24, 0xf1, 0xf1, 0xea, 0x79, 0xd0, 0xcb, 0x07, 0xed, 0x80, 0x8c, 0x49, 0xc4, 0xa4, 0xa3, 0x4e,
	0x87, 0xf2, 0xe8, 0x22, 0xf0, 0xa9, 0x74, 0x62, 0x22, 0x48, 0x98, 0xe0, 0x58, 0x70, 0xc9, 0x8d,
	0xdf, 0xab, 0x0c, 0x56, 0x27, 0x5e, 0x67, 0xfe, 0xfe, 0xf2, 0xb8, 0xc7, 0xb3, 0x84, 0xa3, 0x6e,
	0x79, 0xd8, 0x7e, 0x01, 0xb0, 0xd6, 0xc9, 0x5e, 0x1b, 0x43, 0xf8, 0x23, 0x24, 0x97, 0x5c, 0xf8,
	0x32, 0xed, 0x30, 0x41, 0x59, 0x24, 0x4d, 0x50, 0x07, 0x8d, 0xaf, 0xed, 0xd6, 0x74, 0x6e, 0x69,
	0x0f, 0x73, 0xeb, 0x1f, 0xe5, 0x49, 0xc8, 0x93, 0x64, 0x70, 0x85, 0x7d, 0xee, 0x84, 0x44, 0x0e,
	0xf1, 0x19, 0xf3, 0x08, 0x4d, 0x4f, 0x18, 0x7d, 0x9e, 0x5b, 0x7f, 0x52, 0x12, 0x06, 0x4d, 0x7b,
	0xcd, 0xe8, 0xc5, 0x39, 0xc4, 0x76, 0x3f, 0x62, 0x8d, 0x3d, 0xf8, 0x7d, 0xcc, 0x25, 0xeb, 0x4a,
	0x22, 0x64, 0x37, 0x26, 0x91, 0x59, 0xa9, 0x83, 0x86, 0xee, 0x16, 0x87, 0x06, 0x82, 0x50, 0x0d,
	0x3a, 0x4c, 0xf8, 0x7c, 0x60, 0x56, 0xb3, 0xc8, 0xbb, 0x89, 0xd1, 0x82, 0x5f, 0x5c, 0x36, 0x21,
	0x62, 0x90, 0x98, 0x7a, 0x1d, 0x34, 0xbe, 0x1d, 0x20, 0x5c, 0xfa, 0x73, 0xbc, 0x4a, 0xb5, 0x75,
	0xf5, 0x0f, 0x77, 0xfd, 0xa8, 0xa9, 0xdf, 0xde, 0x59, 0x9a, 0xfd, 0x54, 0x79, 0xc3, 0x18, 0x23,
	0xf8, 0x73, 0xe2, 0x47, 0x11, 0x13, 0xf9, 0xa0, 0xd8, 0xc2, 0xf1, 0xe7, 0x5a, 0xf8, 0x9f, 0xb7,
	0x90, 0x73, 0x7a, 0x22, 0x03, 0x6d, 0xaa, 0x28, 0xe3, 0x2b, 0x2d, 0x0d, 0x7c, 0x16, 0xc9, 0xa2,
	0xb6, 0xb2, 0x83, 0x36, 0xe7, 0x6c, 0x6b, 0x4b, 0xf8, 0x4a, 0xab, 0xda, 0x14, 0x49, 0x51, 0x5b,
	0xdd, 0x41, 0x9b, 0x73, 0xb6, 0xb5, 0x25, 0xfc, 0xf6, 0xe9, 0x74, 0x81, 0xc0, 0x6c, 0x81, 0xc0,
	0xe3, 0x02, 0x81, 0x9b, 0x25, 0xd2, 0x66, 0x4b, 0xa4, 0xdd, 0x2f, 0x91, 0x76, 0xbe, 0xef, 0xf9,
	0x72, 0x38, 0xea, 0x63, 0xca, 0x43, 0xa7, 0xb0, 0xe7, 0xe3, 0x23, 0xe7, 0x7a, 0xb3, 0xec, 0x32,
	0x8d, 0x59, 0xd2, 0xaf, 0x65, 0xfb, 0x7b, 0xf8, 0x1a, 0x00, 0x00, 0xff, 0xff, 0x50, 0x07, 0x3f,
	0xa8, 0x12, 0x03, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Rewards.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.VotePeriod != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.VotePeriod))
		i--
		dAtA[i] = 0x18
	}
	if m.VoteStartSpan != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.VoteStartSpan))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.MajorityPercent.Size()
		i -= size
		if _, err := m.MajorityPercent.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Rewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.VotersRewardPercent.Size()
		i -= size
		if _, err := m.VotersRewardPercent.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.ClientRewardPercent.Size()
		i -= size
		if _, err := m.ClientRewardPercent.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.WinnerRewardPercent.Size()
		i -= size
		if _, err := m.WinnerRewardPercent.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MajorityPercent.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.VoteStartSpan != 0 {
		n += 1 + sovParams(uint64(m.VoteStartSpan))
	}
	if m.VotePeriod != 0 {
		n += 1 + sovParams(uint64(m.VotePeriod))
	}
	l = m.Rewards.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func (m *Rewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.WinnerRewardPercent.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.ClientRewardPercent.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.VotersRewardPercent.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MajorityPercent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MajorityPercent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteStartSpan", wireType)
			}
			m.VoteStartSpan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteStartSpan |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotePeriod", wireType)
			}
			m.VotePeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotePeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinnerRewardPercent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WinnerRewardPercent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientRewardPercent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClientRewardPercent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotersRewardPercent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VotersRewardPercent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
