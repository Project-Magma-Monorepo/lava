
services:

  # #begin mock lava node 
  lava-node-init:
    # Update with the most recent supported version of lavad
    image: ghcr.io/lavanet/lava/lavad:${LAVAD_VERSION:-latest}
    environment:
      - CHAIN_ID=${CHAIN_ID:-lava}
      - KEYRING_BACKEND=${KEYRING_BACKEND:-test}
      - MONIKER=${MONIKER:-DOCKER_COMPOSE_MONIKER}
    entrypoint: ["sh"]
    command: ["/lava/config/new_node_init.sh"]
    volumes:
      - lava_data:/lava
      - ../common/new_node_init.sh:/lava/config/new_node_init.sh
    networks:
      - lava_network
      

  lava-node-config:
    image: ghcr.io/tomwright/dasel:v2.7.0
    entrypoint: ["sh", "-c"]
    environment: []
    command: >
      "
      dasel put -f /lava/.lava/config/genesis.json -t string -v ulava 'app_state.gov.params.min_deposit.[0].denom' &&
      dasel put -f /lava/.lava/config/genesis.json -t string -v '100' 'app_state.gov.params.min_deposit.[0].amount' &&
      dasel put -f /lava/.lava/config/genesis.json -t string -v '10s' 'app_state.gov.params.voting_period' &&
      dasel put -f /lava/.lava/config/genesis.json -t string -v '10s' 'app_state.gov.params.expedited_voting_period' &&
      dasel put -f /lava/.lava/config/genesis.json -t string -v 'ulava' 'app_state.gov.params.expedited_min_deposit.[0].denom' &&
      dasel put -f /lava/.lava/config/genesis.json -t string -v '200' 'app_state.gov.params.expedited_min_deposit.[0].amount' &&
      dasel put -f /lava/.lava/config/genesis.json -t string -v '0.67' 'app_state.gov.params.expedited_threshold' &&
      dasel put -f /lava/.lava/config/genesis.json -t string -v 'ulava' 'app_state.mint.params.mint_denom' &&
      dasel put -f /lava/.lava/config/genesis.json -t string -v 'ulava' 'app_state.staking.params.bond_denom' &&
      dasel put -f /lava/.lava/config/genesis.json -t string -v 'ulava' 'app_state.crisis.constant_fee.denom' &&
      dasel put -f /lava/.lava/config/genesis.json -t string -v '5' 'app_state.epochstorage.params.epochsToSave' &&
      dasel put -f /lava/.lava/config/genesis.json -t string -v '4' 'app_state.epochstorage.params.epochBlocks' &&
      dasel put -f /lava/.lava/config/genesis.json -t string -v '0' 'app_state.distribution.params.community_tax' &&
      dasel put -f /lava/.lava/config/genesis.json -t string -v '0' 'app_state.rewards.params.validators_subscription_participation' &&
      dasel put -f /lava/.lava/config/genesis.json -t string -v '1s' 'app_state.downtime.params.downtime_duration' &&

      dasel put -f /lava/.lava/config/config.toml -t string -v 1s 'consensus.timeout_propose' &&
      dasel put -f /lava/.lava/config/config.toml -t string -v 500ms 'consensus.timeout_propose_delta' &&
      dasel put -f /lava/.lava/config/config.toml -t string -v 1s 'consensus.timeout_prevote' &&
      dasel put -f /lava/.lava/config/config.toml -t string -v 500ms 'consensus.timeout_prevote_delta' &&
      dasel put -f /lava/.lava/config/config.toml -t string -v 500ms 'consensus.timeout_precommit' &&
      dasel put -f /lava/.lava/config/config.toml -t string -v 1s 'consensus.timeout_precommit_delta' &&
      dasel put -f /lava/.lava/config/config.toml -t string -v 1s 'consensus.timeout_commit' &&
      dasel put -f /lava/.lava/config/config.toml -t string -v false 'consensus.skip_timeout_commit' &&

      dasel put -f /lava/.lava/config/config.toml -t string -v true 'rosetta.enable' &&
      dasel put -f /lava/.lava/config/config.toml -t string -v \"tcp://0.0.0.0:26657\" 'rpc.laddr' &&
      dasel put -f /lava/.lava/config/app.toml -t string -v \"0.0.0.0:9090\" 'grpc.address' &&
      dasel put -f /lava/.lava/config/app.toml -t string -v \"tcp://0.0.0.0:1317\" 'api.address' &&
      dasel put -f /lava/.lava/config/app.toml -t string -v true 'api.enable'
      "
    volumes:
      - lava_data:/lava
    networks:
      - lava_network
      
    depends_on:
      lava-node-init:
        condition: service_completed_successfully

  lava-node:
    # Update with the most recent supported version of lavad
    image: ghcr.io/lavanet/lava/lavad:${LAVAD_VERSION:-latest}
    container_name: lava-node
    command: ["start", "--pruning=nothing"]
    ports:
      - "${LAVA_NODE_PORT_API:-1317}:1317"
      - "${LAVA_NODE_PORT_GRPC:-9090}:9090"
      - "${LAVA_NODE_PORT_GRPC_WEB:-9091}:9091"
      - "${LAVA_NODE_PORT_P2P:-26656}:26656"
      - "${LAVA_NODE_PORT_RPC:-26657}:26657"
    volumes:
      - lava_data:/lava
    networks:
      - lava_network
      
    healthcheck:
      test: ["CMD", "lavad", "status"]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      lava-node-init:
        condition: service_completed_successfully
      lava-node-config:
        condition: service_completed_successfully

  post-lava-node-init:
    image: ghcr.io/lavanet/lava/lavad:${LAVAD_VERSION:-latest}
    entrypoint: ["sh"]
    command: ["/lava/config/post_node_init.sh"]
    volumes:
      - lava_data:/lava
      - ../common/post_node_init.sh:/lava/config/post_node_init.sh
      - ../../specs/:/lava/specs/
      - ../common/sui.json:/lava/config/sui.json  # Mount sui.json to /lava/config/
      - ../common/lava.json:/lava/config/lava.json  # Mount sui.json to /lava/config/
      - ../common/ibc.json:/lava/config/ibc.json  # Mount sui.json to /lava/config/
      - ../common/tendermint.json:/lava/config/tendermint.json  # Mount sui.json to /lava/config/

      - ../../cookbook/plans/:/lava/cookbook/plans/
    networks:
      - lava_network
    depends_on:
      lava-node:
        condition: service_healthy
    restart: "no"
    #Test to not make it run again
    deploy:
      restart_policy:
        condition: none

  #end mock lava node
  nginx:
    image: nginx:latest
    networks:
      - lava_network   # Uncomment this to enable networking
    ports:
      - "8080:80"        # For HTTP redirect
      - "8081:81"        # For HTTP redirect
      - "443:443"      # For HTTPS
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/fullchain.pem:/etc/nginx/ssl/fullchain.pem:ro
      - ./nginx/privkey.pem:/etc/nginx/ssl/privkey.pem:ro
            # Add these new volume mounts
      - ./nginx/sites-available:/etc/nginx/sites-available:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled
    command: >
      /bin/bash -c "
      mkdir -p /etc/nginx/sites-available /etc/nginx/sites-enabled &&
      ln -sf /etc/nginx/sites-available/sui_server /etc/nginx/sites-enabled/ &&
      nginx -g 'daemon off;'"
    depends_on:
      post-lava-node-init:
        condition: service_completed_successfully
      provider1:
        condition: service_started
      provider2:
        condition: service_started
    restart: always

  # lava-provider-init:
  #   image: ghcr.io/lavanet/lava/lavap:${LAVAP_VERSION:-latest}
  #   container_name: lava-provider-init
  #   # networks:
  #   #   - lava_network   # Add this for consistency
  #   volumes:
  #     - lava_data:/lava
  #   environment:
  #     - PROVIDER_WALLET=${PROVIDER_WALLET:-servicer1}
  #     - KEYRING_BACKEND=${KEYRING_BACKEND:-test}
  #   entrypoint: ["lavap"]
  #   command: 
  #     - "keys"
  #     - "add"
  #     - "${PROVIDER_WALLET:-servicer1}"
  #     - "--keyring-backend"
  #     - "${KEYRING_BACKEND:-test}"
  #   restart: "no"
  
  # lava-provider:
  #   image: ghcr.io/lavanet/lava/lavap:${LAVAP_VERSION:-latest}
  #   # depends_on:
  #   #   lava-provider-init:
  #   #     condition: service_completed_successfully
  #   volumes:
  #     - ../common/provider.yml:/lava/config/provider.yml:ro
  #     - lava_data:/lava
  #     - ../common/sui.json:/lava/specs/sui.json:ro
  #   # environment:
  #   #   - TZ=UTC
  #   #   - PROVIDER_WALLET=${PROVIDER_WALLET:-servicer1}
  #   #   - GEOLOCATION=${GEOLOCATION:-2}
  #   #   - CHAIN_ID=${CHAIN_ID:-lava}
  #   #   - KEYRING_BACKEND=${KEYRING_BACKEND:-test}
  #   #   - LAVA_RPC_NODE=${LAVA_RPC_NODE:-tcp://lava-node:26657}
  #   command:
  #     [
  #       "rpcprovider",
  #       "provider.yml",
  #       "--from",
  #       "${PROVIDER_WALLET:-servicer1}",
  #       "--chain-id",
  #       "lava",
  #       "--log_level",
  #       "debug",
  #       "--geolocation",
  #       "${GEOLOCATION:-2}",
  #       "--keyring-backend",
  #       "${KEYRING_BACKEND:-test}",
  #       "--node",
  #       "tcp://lava-node:26657",
  #       # "--use-static-spec",
  #       # "sui.json"

  #     ]
  #   networks:
  #     - lava_network
  #   depends_on:
  #     - lava-node
  #   # Expose the provider port directly since there's no nginx
  #   # ports:
  #   #   - "${PROVIDER_SUI_PORT:-2220}:${PROVIDER_SUI_PORT:-2220}"  # Use the same port of the provider
  #   restart: always

  provider1:
    image: ghcr.io/lavanet/lava/lavap:${LAVAP_VERSION:-latest}
    volumes:
      - ../common/provider_sui.yml:/lava/config/provider_sui.yml:ro
      - lava_data:/lava
    command:
      [
        "rpcprovider",
        "provider_sui.yml",
        "--chain-id",
        "lava",
        "--from",
        "servicer1",
        "--log_level",
        "debug",
        "--geolocation",
        "2",
        "--keyring-backend",
        "test",
        "--shard-id",
        "1",
        "--node",
        "tcp://lava-node:26657",

      ]
    networks:
      - lava_network
    depends_on:
      lava-node:
        condition: service_healthy
      post-lava-node-init:
        condition: service_completed_successfully
    restart: always

  provider2:
    image: ghcr.io/lavanet/lava/lavap:${LAVAP_VERSION:-latest}
    volumes:
      - ../common/provider_lava.yml:/lava/config/provider_lava.yml:ro
      - lava_data:/lava
    command:
      [
        "rpcprovider",
        "provider_lava.yml",
        "--chain-id",
        "lava",
        "--from",
        "servicer2",
        "--log_level",
        "debug",
        "--geolocation",
        "2",
        "--keyring-backend",
        "test",
        "--shard-id",
        "2",
        "--node",
        "tcp://lava-node:26657",

      ]
    networks:
      - lava_network
    depends_on:
      lava-node:
        condition: service_healthy
      post-lava-node-init:
        condition: service_completed_successfully
    restart: always


  #Consumer for the lava rpc, call this when making rpc calls so the consumer can query the lava blockchain fro provider
  consumer:
    image: ghcr.io/lavanet/lava/lavap:${LAVAP_VERSION:-latest}
    networks:
      - lava_network
    ports:
      - "3334:3334"
      - "3335:3335"
      - "3336:3336"
      - "2220:2220"
    volumes:
      - ../common/consumer.yml:/lava/config/consumer.yml:ro
      - lava_data:/lava
    command:
      [
        "rpcconsumer",
        "consumer.yml",
        "--chain-id",
        "lava",
        "--from",
        "servicer1",
        "--geolocation",
        "2",
        "--log_level",
        "trace",
        "--allow-insecure-provider-dialing",
        "--keyring-backend",
        "test",
        "--node",
        "tcp://lava-node:26657",
      ]
    depends_on:
      lava-node:
        condition: service_healthy
      post-lava-node-init:
        condition: service_completed_successfully
    restart: always


    




volumes:
  lava_data:

networks:
  lava_network:  # Define the network

